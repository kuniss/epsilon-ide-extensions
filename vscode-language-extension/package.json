{
    "name": "epsilon-eag",
    "displayName": "EAG Language",
    "description": "Specification Language for Extended Affix Grammars",
    "version": "2.2.0",
    "publisher": "grammarcraft",
    "license": "EPL-2.0",
    "homepage": "https://github.com/kuniss/epsilon-ide-extensions/blob/master/vscode-language-extension/README.md",
    "bugs": {
        "url": "https://github.com/kuniss/epsilon-ide-extensions/issues"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/kuniss/epsilon-ide-extensions.git"
    },
    "engines": {
        "vscode": "^1.42.0"
    },
    "categories": [
        "Programming Languages"
    ],
    "contributes": {
        "languages": [
            {
                "id": "epsilon",
                "aliases": [
                    "EAG Grammar",
                    "EAG",
                    "gamma"
                ],
                "extensions": [
                    ".eps",
                    ".epsilon",
                    ".eag"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "epsilon",
                "scopeName": "source.epsilon",
                "path": "./syntaxes/epsilon.tmLanguage.json"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "EAG - Extended Affix Grammars",
            "properties": {
                "eag.runCompilerGenerator": {
                    "type": "boolean",
                    "default": false,
                    "markdownDescription": "[Experimental] Run the EAG compiler generator executable defined as `#eag.compilerGenerator.executable#` to generate a compiler and report errors and warnings for EAG grammar specifications.\n\nChanges will be applied after restart. Alternatively, command 'Reload Window' may be executed."
                },
                "eag.compilerGenerator.executable": {
                    "type": "string",
                    "default": "./gamma",
                    "markdownDescription": "Defines the path to the EAG compiler generator executable (and resources) which is used to generated compilers and to validate grammars.\n\nIn case, a relative path is given then it will be relative to the project's root directory.\n\nChanges will be applied after restart. Alternatively, command 'Reload Window' may be executed.\n\nNote: This will only evaluated if `#eag.runCompilerGenerator#` is enabled."
                },
                "eag.compilerGenerator.targetDir": {
                    "type": "string",
                    "default": "./build/",
                    "markdownDescription": "Defines the path to a directory where the generated compiler artifacts will be written to.\n\nIn case, a relative path is given then it will be relative to the project's root directory.\n\nChanges will be applied after restart. Alternatively, command 'Reload Window' may be executed.\n\nNote: This will only evaluated if `#eag.runCompilerGenerator#` is enabled."
                },
                "eag.compilerGenerator.codeGenerationOnly": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Perform code generation only and skip D compilation with DMD (e.g., check if no DMD is installed).\n\nChanges will be applied after restart. Alternatively, command 'Reload Window' may be executed.\n\n(Note: applies the '-g' option)\n\nNote: This will only evaluated if `#eag.runCompilerGenerator#` is enabled."
                },
                "eag.compilerGenerator.additionalExeOptions": {
                    "type": "string",
                    "default": "",
                    "markdownDescription": "Defines additional execution arguments which will be added to the EAG compiler generator executable invocation defined by eag.CompilerGenerator.executable\n\nChanges will be applied after restart. Alternatively, command 'Reload Window' may be executed.\n\nNote: This will only evaluated if `#eag.runCompilerGenerator#` is enabled."
                }
            }
        },
        "snippets": [
            {
                "language": "epsilon",
                "path": "./snippets.json"
            }
        ]
    },
    "activationEvents": [
        "onLanguage:epsilon"
    ],
    "main": "./out/extension",
    "scripts": {
        "vscode:prepublish": "tsc -p ./client",
        "compile": "tsc -watch -p ./client"
    },
    "devDependencies": {
        "@types/node": "^8.10.48",
        "typescript": "^3.8.3",
        "@types/vscode": "^1.42.0"
    },
    "dependencies": {
        "vscode-languageclient": "^3.1.0"
    }
}
