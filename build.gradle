buildscript {
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath 'org.xtext:xtext-gradle-plugin:3.0.2'
		classpath 'com.github.node-gradle:gradle-node-plugin:2.2.0'
		classpath 'net.researchgate:gradle-release:2.8.1'
	}
}

apply plugin: 'com.github.node-gradle.node'
apply plugin: 'net.researchgate.release'

def nodeVersion = '22.14.0'
def npmVersion_ = '10.9.2'
node {
	version = nodeVersion
	npmVersion = npmVersion_
	download = true
}

// Configuration for Xtext projects
configure(subprojects.findAll { it.name.startsWith('de.grammarcraft.epsilon') }) {

	ext.xtextVersion = '2.21.0'
	repositories {
		mavenCentral()
	}
	
	apply plugin: 'java'
	dependencies {
		compile platform("org.eclipse.xtext:xtext-dev-bom:${xtextVersion}")
	}

	apply plugin: 'org.xtext.xtend'
	apply from: "${rootDir}/gradle/source-layout.gradle"
	apply plugin: 'eclipse'
	
	group = 'de.grammarcraft.epsilon'
	
	sourceCompatibility = '1.8'
	targetCompatibility = '1.8'
	
	configurations.all {
		exclude group: 'asm'
	}
	
}

// The following gamma binaries and runtime sources are expected to be provided
// by the calling GH Action workflow, using the GH Action release-downloader 
// for downloading it from a gamma repo release page into the directory
ext.gammaReleaseDownloadDir = './build/gamma-release-download'
// to ensure Gradle build can alwaya be intialized
if (!project.hasProperty('gammaReleaseVersion')) {
	ext.gammaReleaseVersion = 'gamma_version_not_given'
}

ext.gammaNativeResources = copySpec {
	// gamma binaries
	from ("$gammaReleaseDownloadDir/gamma.linux-amd64") {
		into 'native/linux'
		rename 'gamma.linux-amd64', 'gamma'
	}
	from ("$gammaReleaseDownloadDir/gamma.macos-amd64") {
		into 'native/macos'
		rename 'gamma.macos-amd64', 'gamma'
	}
	from ("$gammaReleaseDownloadDir/gamma.windows-amd64.exe") {
		into 'native/windows'
		rename 'gamma.windows-amd64.exe', 'gamma.exe'
	}
	
	// gamma runtime souces
	from(zipTree(file("$gammaReleaseDownloadDir/gamma-${gammaReleaseVersion}.zip"))) {
		include '*/include/runtime.d'
		include '*/src/io.d'
		include '*/src/log.d'
		include '*/src/epsilon/soag/listacks.d'
		// drop the release name directory
		eachFile { fcd ->
			def pathSegments = fcd.relativePath.segments
			pathSegments[0] = 'src-dlang'
            fcd.relativePath = new RelativePath(true, pathSegments)
        }
        includeEmptyDirs = false
	}
}

task npmInstallVsce(type: NpmTask, dependsOn: npmSetup) {
	ext.destPath = "$rootProject.projectDir/node_modules/vsce" 
	outputs.dir(destPath)
	group 'Node'
	description 'Installs the NodeJS package "Visual Studio Code Extension Manager"'
	args = [ 'install', 'vsce' ]
}

// Configuration for vscode projects
configure(subprojects.findAll { it.name.startsWith('vscode') }) {

	apply plugin: 'com.github.node-gradle.node'
	node {
	    version = nodeVersion
	    npmVersion = npmVersion_
	    download = true
	}

	def inputFiles = fileTree(
		dir: projectDir, 
		excludes: [ 'out/**', '.gitignore', '.gradle/**', 'build/**', '*.gradle' ]
	)

	npmInstall {
		inputs.files(inputFiles)
		outputs.dir('out')
	}

	task vscodeExtension(dependsOn: [npmInstall, npmInstallVsce], type: NodeTask) {
		description = "builds the VS code extension in this project"
		ext.destDir = new File(buildDir, 'vscode')
		ext.archiveName = "epsilon-eag-$project.name-${project.version}.vsix"
		ext.destPath = "$destDir/$archiveName"
		inputs.with {
			files inputFiles
			dir npmInstallVsce.destPath
		}
		outputs.dir destDir
		doFirst {
			destDir.mkdirs()
		}
		script = file("$npmInstallVsce.destPath/vsce")
		args = [ 'package', '--out', destPath ]
		execOverrides {
			workingDir = projectDir
		}
	}

	task build {
		dependsOn vscodeExtension
	}

	task publishToVSMarketplace(dependsOn: vscodeExtension, type: NodeTask) {
		group = 'Publish'
		description = 'Publishs the plugin to the VS Code Marketplace'
	    script = file("$rootProject.projectDir/node_modules/vsce/vsce")
	    args = [ 'publish', "--packagePath", project.tasks.vscodeExtension.destPath, '-p', System.getenv('MSVSX_ACCESS_TOKEN') ] 
	    execOverrides {
	        workingDir = projectDir
	    }
	}
	
	task publishToOpenVSXRegistry(dependsOn: vscodeExtension, type: NpxTask) {
		group = 'Publish'
		description = 'Publishs the plugin to the Open VSX Registry'
  		command = 'ovsx'
  		args = ['--debug', 'publish', project.tasks.vscodeExtension.destPath, '-p', System.getenv('OPENVSX_ACCESS_TOKEN')]
	}

	task clean {
		doLast {
			delete vscodeExtension.destDir
			delete 'out' // output of npmInstall - don't want to delete node_modules
		}
	}

}

plugins.withType(com.moowork.gradle.node.NodePlugin) {
	node {
		workDir = file("$rootProject.buildDir/nodejs")
		nodeModulesDir = rootProject.projectDir
	}
}

ext.versionPattern = /\d+.\d+(.\d+)?/
ext.encoding = 'UTF-8'
def packageFilesToUpdate = [
	file('vscode-language-extension/package.json'),
	file('vscode-dark-theme-extension/package.json'),
	file('vscode-light-theme-extension/package.json'),
	file('vscode-extension-pack/package.json'),
]
def changeLogFilesToUpdate = [
	file('vscode-language-extension/CHANGELOG.md'),
	file('vscode-dark-theme-extension/CHANGELOG.md'),
	file('vscode-light-theme-extension/CHANGELOG.md'),
	file('vscode-extension-pack/CHANGELOG.md'),
]
def manifestFilesToUpdate = [
	file('de.grammarcraft.epsilon/META-INF/MANIFEST.MF'),
	file('de.grammarcraft.epsilon.ide/META-INF/MANIFEST.MF'),
	file('de.grammarcraft.epsilon.ui/META-INF/MANIFEST.MF'),
]

def updatePackageFiles(packageFilesToUpdate) {
	// String replacements - isn't long enough to justify advanced code ;)
	packageFilesToUpdate.forEach { file ->
		String text = file.getText(encoding)
		text = text.replaceAll("\"version\": \"$versionPattern\",", "\"version\": \"$project.version\",")
		file.setText(text, encoding)
	}
}

def updatePluginManifests(manifestFilesToUpdate) {
	manifestFilesToUpdate.forEach { file ->
		String text = file.getText(encoding)
		text = text.replaceAll("Bundle-Version: \\d+\\.\\d+\\.\\d+", "Bundle-Version: $project.version")
		file.setText(text, encoding)
	}
}

confirmReleaseVersion {
	doLast {
		updatePackageFiles(packageFilesToUpdate)
		updatePluginManifests(manifestFilesToUpdate)

		// Replaces the "## <version>" just after # Change Log with "## <project.version>" 
		changeLogFilesToUpdate.forEach { file ->
			String text = file.getText(encoding)
			text = text.replaceFirst("# Change Log\n(\n)?## \\d+\\.\\d+\\.\\d+") { all, ignored ->
				"# Change Log\n\n## $project.version"
			}
			file.setText(text, encoding)
		}
	}
}

updateVersion {
	doLast {

		updatePackageFiles(packageFilesToUpdate)
		updatePluginManifests(manifestFilesToUpdate)

		// Adds a "## <project.version>" just after # Change Log
		changeLogFilesToUpdate.forEach { file ->
			String text = file.getText(encoding)
			text = text.replaceAll("# Change Log\n(\n)?") { all, ignored ->
				"# Change Log\n\n## $project.version\n\n"
			}
			file.setText(text, encoding)
		}
	}
}

release {
    tagTemplate = 'v${version}'
	preTagCommitMessage = '[release] pre tag commit: '
    tagCommitMessage = '[release] creating tag: '
    newVersionCommitMessage = '[release] new version commit: '
    failOnSnapshotDependencies = false
}

// Workaround for issue https://github.com/researchgate/gradle-release/issues/144
task build {
	dependsOn subprojects.findResults { it.tasks.findByName('build') }
}
