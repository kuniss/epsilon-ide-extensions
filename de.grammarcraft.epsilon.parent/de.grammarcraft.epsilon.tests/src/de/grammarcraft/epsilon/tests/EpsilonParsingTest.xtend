/*
 * generated by Xtext 2.20.0
 */
package de.grammarcraft.epsilon.tests

import com.google.inject.Inject
import de.grammarcraft.epsilon.epsilon.Specification
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(EpsilonInjectorProvider)
class EpsilonParsingTest {
	@Inject
	ParseHelper<Specification> parseHelper
	
	
	@Test
	def void parseSimpleExample() {
		val result = parseHelper.parse('''
			! simple example
			x = "a" | "b".
			(* some nested comment *)
			x <+ "a": x> : "a".
		''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
	
	@Test
	def void parseRedcutedExample() {
		val result = parseHelper.parse('''
			! DeclAppl
			
			Tab = | id ";" Tab.

			DeclAppl <+ Tab: Tab> :
				<, Tab >
				{ <- Tab : Tab, + Tab1: Tab>
					"DECL" id < id > Find <id, Tab, "FALSE" >
					<id ";" Tab, Tab1 >
				| <- Tab : Tab, + Tab1: Tab>
					"APPL" id < id > Find <id, Tab, "TRUE" >
					<Tab, Tab1 >
				} <- Tab : Tab, + Tab: Tab> .
			
			x = "a" | "b".
			id* = x | id x.
			
			x <+ "a": x> : "a".
			x <+ "b": x> : "b".
			
			id* <+ id: id> :
				x < x >
				<x, id >
				{ <- id : id, + id1: id>
					x < x > <id x, id1 >
				} <- id : id, + id: id> .
				
			Bool = "TRUE" | "FALSE".
			
			Find <- id: id, - : Tab, + "FALSE": Bool>: .
			Find <- id: id, - id ";" Tab : Tab, + "TRUE": Bool>: .
			Find <- id: id, - #id ";" Tab : Tab, + Bool: Bool>:
				Find <id, Tab, Bool >.
		''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
}
