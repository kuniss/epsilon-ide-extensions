! Oberon-0 (Typtabellen)  MK 06.96

OberonO = Decls Stmts.

OberonOb <+ Decls Stmts: OberonO>:
  Standard <TypeTab> Decls <"|", Decls, N, TypeTab, TypeTab1> Stmts <Stmts>.

letter =
    "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m"
  | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
  | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M"
  | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z".

letter:
    <+ "a": letter> "a" | <+ "b": letter> "b" | <+ "c": letter> "c" | <+ "d": letter> "d"
  | <+ "e": letter> "e" | <+ "f": letter> "f" | <+ "g": letter> "g" | <+ "h": letter> "h"
  | <+ "i": letter> "i" | <+ "j": letter> "j" | <+ "k": letter> "k" | <+ "l": letter> "l"
  | <+ "m": letter> "m" | <+ "n": letter> "n" | <+ "o": letter> "o" | <+ "p": letter> "p"
  | <+ "q": letter> "q" | <+ "r": letter> "r" | <+ "s": letter> "s" | <+ "t": letter> "t"
  | <+ "u": letter> "u" | <+ "v": letter> "v" | <+ "w": letter> "w" | <+ "x": letter> "x"
  | <+ "y": letter> "y" | <+ "z": letter> "z"
  | <+ "A": letter> "A" | <+ "B": letter> "B" | <+ "C": letter> "C" | <+ "D": letter> "D"
  | <+ "E": letter> "E" | <+ "F": letter> "F" | <+ "G": letter> "G" | <+ "H": letter> "H"
  | <+ "I": letter> "I" | <+ "J": letter> "J" | <+ "K": letter> "K" | <+ "L": letter> "L"
  | <+ "M": letter> "M" | <+ "N": letter> "N" | <+ "O": letter> "O" | <+ "P": letter> "P"
  | <+ "Q": letter> "Q" | <+ "R": letter> "R" | <+ "S": letter> "S" | <+ "T": letter> "T"
  | <+ "U": letter> "U" | <+ "V": letter> "V" | <+ "W": letter> "W" | <+ "X": letter> "X"
  | <+ "Y": letter> "Y" | <+ "Z": letter> "Z".

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9".

digit:
    <+ "0": digit> "0" | <+ "1": digit> "1" | <+ "2": digit> "2" | <+ "3": digit> "3"
  | <+ "4": digit> "4" | <+ "5": digit> "5" | <+ "6": digit> "6" | <+ "7": digit> "7"
  | <+ "8": digit> "8" | <+ "9": digit> "9".

letgits = | letter letgits | digit letgits.
id = "ID" letgits.

letgits:
    <+ : letgits>
  | <+ letter letgits: letgits>
      letter <letter> letgits <letgits>
  | <+ digit letgits: letgits>
      digit <digit> letgits <letgits>.

id <+ "ID" letgits: id>:
  "ID" letgits <letgits>.

digits = | digit digits.
int = "INT" digits.

digits:
    <+ : digits>
  | <+ digit digits: digits>
      digit <digit> digits <digits>.

int <+ "INT" digits: int>:
  "INT" digits <digits>.

Sel = | "." id Sel | "[" Expr "]" Sel.

Sel:
    <+ : Sel>
  | <+ "." id Sel: Sel>
      "." id <id> Sel <Sel>
  | <+ "[" Expr "]" Sel: Sel>
      "[" Expr <Expr> "]" Sel <Sel>.

UnOp = "+" | "-" | "NOT" | "()".
Op = "+" | "-" | "*" | "DIV" | "MOD" | "OR" | "AND" | "=" | "#" | "<" | "<=" | ">" | ">=".
Expr =
    id Sel
  | int
  | UnOp Expr
  | "(" Expr Op Expr ")".

UnOp:
    <+ "+": UnOp> "+" | <+ "-": UnOp> "-"
  | <+ "NOT": UnOp> "NOT"
  | <+ "()": UnOp> "()".

Op:
    <+ "+": Op> "+" | <+ "-": Op> "-"
  | <+ "*": Op> "*" | <+ "DIV": Op> "DIV" | <+ "MOD": Op> "MOD"
  | <+ "OR": Op> "OR" | <+ "AND": Op> "AND"
  | <+ "=": Op> "=" | <+ "#": Op> "#"
  | <+ "<": Op> "<" | <+ "<=": Op> "<=" | <+ ">": Op> ">" | <+ ">=": Op> ">=".

Expr:
    <+ id Sel: Expr>
      id <id> Sel <Sel>
  | <+ int: Expr>
      int <int>
  | <+ UnOp Expr: Expr>
      UnOp <UnOp> Expr <Expr>
  | <+ "(" Expr1 Op Expr2 ")": Expr>
      "(" Expr <Expr1> Op <Op> Expr <Expr2> ")".

APList = "NIL" | Expr APList.

APList:
    <+ "NIL": APList>
      "NIL"
  | <+ Expr APList: APList>
      Expr <Expr> APList <APList>.

Stmts = "NIL" | "(" Stmts Stmts ")"
  | "ASSIGN" id Sel Expr
  | "CALL" id APList
  | "IF" Expr Stmts Stmts
  | "WHILE" Expr Stmts
  | "REPEAT" Stmts Expr.

Stmts:
    <+ "NIL": Stmts>
      "NIL"
  | <+ "(" Stmts1 Stmts2 ")": Stmts>
      "(" Stmts <Stmts1> Stmts <Stmts2> ")".

Stmts:
    <+ "ASSIGN" id Sel Expr: Stmts>
      "ASSIGN" id <id> Sel <Sel> Expr <Expr>
  | <+ "CALL" id APList: Stmts>
      "CALL" id <id> APList <APList>
  | <+ "IF" Expr Stmts1 Stmts2: Stmts>
      "IF" Expr <Expr> Stmts <Stmts1> Stmts <Stmts2>
  | <+ "WHILE" Expr Stmts: Stmts>
      "WHILE" Expr <Expr> Stmts <Stmts>
  | <+ "REPEAT" Stmts Expr: Stmts>
      "REPEAT" Stmts <Stmts> Expr <Expr>.

IdList = "NIL" | id IdList.

IdList:
    <+ "NIL": IdList, - TypeTab: TypeTab, + TypeTab: TypeTab>
      "NIL"
  | <+ id IdList: IdList, - TypeTab1: TypeTab, + TypeTab: TypeTab>
      id <id> IdList <IdList, id "UNDEF" TypeTab1, TypeTab>.

BasicType = "INT" | "BOOL".
N = | "|" N.
Type =
    BasicType
  | "STRUCT" N.

StructType:
    <- N1: N, + "(" "STRUCT" N1 "ARRAY" Expr TypeUse Decls ")": Decls, + N: N,
     - TypeTab: TypeTab, + "STRUCT" N1: Type>
      "ARRAY" Expr <Expr> Type <"|" N1, Decls, N, TypeTab, TypeUse>
  | <- N1: N, + "STRUCT" N1 "RECORD" Decls: Decls, + N: N,
     - TypeTab: TypeTab, + "STRUCT" N1: Type>
      "RECORD" Decls <"|" N1, Decls, N, TypeTab, TypeTab1>.

Type:
    <- N: N, + "NIL": Decls, + N: N, - TypeTab: TypeTab, + id TypeTab: TypeUse>
      id <id>
  | <- N1: N, + Decls: Decls, + N: N, - TypeTab: TypeTab, + Type: TypeUse>
      StructType <N1, Decls, N, TypeTab, Type>.

Kind = "VAR" | "VAL".
M = | "|" M.
FPList = "NIL" | Kind M IdList TypeUse FPList.

Kind:
  <+ "VAR": Kind> "VAR" | <+ "VAL": Kind> "VAL".

M:
    <+ : M>
  | <+ "|" M: M>
      "|" M <M>.

FPList:
    <+ "NIL": FPList, - TypeTab: TypeTab, + TypeTab: TypeTab>
      "NIL"
  | <+ Kind M IdList id TypeTab2 FPList: FPList, - TypeTab1: TypeTab, + TypeTab: TypeTab>
      Kind <Kind> M <M> IdList <IdList, TypeTab1, TypeTab2> "TYPE" id <id>
      FPList <FPList, TypeTab2, TypeTab>.

TypeDef =
    "UNDEF"
  | id
  | Type.
TypeTab = "NIL" | id TypeDef TypeTab.
TypeUse =
    id TypeTab
  | Type.

Object =
    "CONST" Expr
  | "TYPE" TypeUse
  | "FIELD" TypeUse
  | "VAR" TypeUse
  | "PROC" FPList Decls Stmts.
Struct =
    "ARRAY" Expr TypeUse
  | "RECORD" Decls.
Decls = "NIL" | "(" Decls Decls ")"
  | id Object
  | "LIST" IdList Object
  | "STRUCT" N Struct.

Decls:
    <- N: N, + "NIL": Decls, + N: N,
     - TypeTab: TypeTab, + TypeTab: TypeTab>
      "NIL"
  | <- N1: N, + "(" Decls1 Decls2 ")": Decls, + N: N,
     - TypeTab1: TypeTab, + TypeTab: TypeTab>
      "(" Decls <N1, Decls1, N2, TypeTab1, TypeTab2>
      Decls <N2, Decls2, N, TypeTab2, TypeTab> ")".

Decls:
    <- N: N, + id "CONST" Expr: Decls, + N: N,
     - TypeTab: TypeTab, + id "UNDEF" TypeTab: TypeTab>
      "CONST" id <id> Expr <Expr>
  | <- N: N, + id "TYPE" id1 id "UNDEF" TypeTab: Decls, + N: N,
     - TypeTab: TypeTab, + id id1 TypeTab: TypeTab>
      "ALIAS" id <id> id <id1>
  | <- N1: N, + "(" id "TYPE" Type Decls ")": Decls, + N: N,
     - TypeTab: TypeTab, + id Type TypeTab: TypeTab>
      "TYPE" id <id> StructType <N1, Decls, N, id "UNDEF" TypeTab, Type>
  | <- N1: N, + "(" "LIST" IdList "FIELD" TypeUse Decls ")": Decls, + N: N,
     - TypeTab1: TypeTab, + TypeTab: TypeTab>
      "FIELD" IdList <IdList, TypeTab1, TypeTab> Type <N1, Decls, N, TypeTab, TypeUse>
  | <- N1: N, + "(" "LIST" IdList "VAR" TypeUse Decls ")": Decls, + N: N,
     - TypeTab1: TypeTab, + TypeTab: TypeTab>
      "VAR" IdList <IdList, TypeTab1, TypeTab> Type <N1, Decls, N, TypeTab, TypeUse>
  | <- N1: N, + id "PROC" FPList Decls Stmts: Decls, + N: N,
     - TypeTab: TypeTab, + id "UNDEF" TypeTab: TypeTab>
      "PROC" id <id> FPList <FPList, id "UNDEF" TypeTab, TypeTab1>
      Decls <N1, Decls, N, TypeTab1, TypeTab2> Stmts <Stmts>.

Standard <+ "ID" "I" "N" "T" "E" "G" "E" "R"  "INT"
            "ID" "B" "O" "O" "L" "E" "A" "N"  "BOOL"
            "NIL": TypeTab>: .
